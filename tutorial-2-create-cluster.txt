#############################################################################
#                                                                           #
# Learn Kubernetes Basics - Part 2 - Create a cluster                       #
#                                                                           #
#############################################################################


Let's now refine a bit few concepts on the node, and get these concepts in 
action in setting up and deploying a cluster!

The most interesting part of the tutorial is to manage applications on a 
Kubernetes cluster, but it is actually very interesting also to take the time 
to learn how to set a cluster up.

Several scenarios are possible, and we will drill into three options:
    - deploying 3 virtual machines on the laptop, and make one the Master of 
      the cluster, and the two other the Slaves : this is the preferred 
      scenario since the Kubernetes software running on the VMs cannot know 
      that it is all running on the same physical machine, so it gives a very 
      representative setup;
    - deploying the cluster on docker containers, using "Kubernetes-in-Docker" 
      and faking a cluster: this is less representative, but it can run on a 
      much smaller footprint than the previous option (which require a laptop 
      with enough CPU and memeory to accomodate for 3 VM);
    - and finally we need to find a possibility to run this tutorial on a 
      'normal office laptop', i.e. running on windows and with maximum 8GB 
      memory.

The appendix 0 contains the details for the three deployment scenarios. We will 
only describe here how to trigger the automated deployment of teh three 
approaches.


===============================================================================

Part 1 - deployment of a Linux-powered laptop

===============================================================================


This part covers the first two scenario: the same script called 
'deploy-cluster.sh' can trigger the automated deployment of both VM-based and 
container-based clusters:

tso@laptop:~ cd /projects/learn-kubernetes/
tso@laptop:/projects/learn-kubernetes/$ ./deploy-cluster.sh

If you pass no argument to the script, or if you pass the -h (or --help) 
argument, it will display the following message:

    ========================================================================
    |  Deploy a 3 nodes Kubernetes cluster                                 |
    ========================================================================
    
    This script will deploy a 3-nodes Kubernetes cluster. You must indicate
    the type of deployment you want:
        deploy-cluster 'argument'
    where 'argument is:
        -c, --containers         it will deploy the cluster on containers
        -v, --virtualmachines    it will deploy the cluster on VMs
    
    Please retry with one of these arguments.
    
    ========================================================================
    |  The END                                                             |
    ========================================================================

As indicated, you can trigger the deployment on VMs with the argument -v (or 
--virtualmachines), and the deployment on containers with the argument -c (or 
--containers).

This script is actually only switching your action to two other shell scripts 
which are each specialized in one type of deployment:

    ./deploy-cluster-vm/deploy-vm.sh        for the VMs based deployment
    ./deploy-cluster-cont/deploy-cont.sh    for the container-based deployment

You may run these two scripts directly, without using 'deploy-cluster.sh'.

